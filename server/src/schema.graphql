    type Query {
          me: User!
          post: Post!
          users(query: String, first:Int, skip:Int, after: String): [User!]!
          posts(query: String, first:Int, skip:Int, after: String): [Post!]!
          comments: [Coment!]!
          findUserById(id: ID!): User!
          findUserPosts(id: ID!): [Post!]!
          sum(a: Float!, b: Float!) :Float!
      }
 
      type Mutation {
             createUser(data: CreateUserInput!): User!
             deleteUser(id: ID!): User!
             updateUser(id: ID!, data: UpdateUserInput): User!
             
             createPost(data: CreatePostInput!): Post!
             deletePost(id: ID!): Post!
             updatePost(id: ID!, data: UpdatePostInput!): Post!
             
             createComent(data: CreateCommentInput!): Coment!
             deleteComent(id: ID!): Coment!
             updateComent(id: ID!, data: UpdateCommentInput!): Coment!
       }

       input UpdateUserInput {
           name: String
           email: String
          
       }

       input CreateUserInput {
           name: String!
           email: String!
           
       }

       input CreatePostInput {
           title: String!
           body: String!
           published: Boolean
           author: ID!
       }


        input UpdatePostInput {
            title: String
            body: String
            published: Boolean
        }


       input CreateCommentInput{
           text: String!
           author: ID!
           post: ID!
       }

       input UpdateCommentInput {
            text: String
        }



      type User {
          id: ID!
          name: String!
          email: String!
          posts: [Post!]!
          comments: [Coment!]!
      }

      type Post {
          id: ID!
          title: String!
          body: String!
          published: Boolean
          author: User!
          comments: [Coment!]!
      }

      type Coment {
          id: ID!
          text: String!
          author: User!
          post: Post!
      }